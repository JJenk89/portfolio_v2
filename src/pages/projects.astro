---
import "../styles/global.css";
import "../styles/projects.css";
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

const projects = [
	{
		title: "Visuals by Francesca",
		type: "(Photography Portfolio)",
		description:
			"A high-performance portfolio site for a professional photographer, featuring a minimalist design to showcase work and integrated analytics. Achieved top Google Lighthouse scores and drove a significant increase in client traffic post-launch.",
		screenshot: "/screenshots/visuals-mob.webp",
		technologies: ["HTML5", "CSS3", "JavaScript", "GA4"],
		liveLink: "https://visualsbyfrancesca.com",
		githubLink: "https://github.com/JJenk89/fb_portfolio",
		id: 1,
	},
	{
		title: "Merrill-Reid Quiz",
		type: "(Interactive Training Tool)",
		description:
			"A dynamic React-based app designed to train employees in communication skills. Features TypeScript for type safety, SASS for maintainable styling, and real-time result feedback. Actively used by teams monthly to reinforce professional development.",
		screenshot: "/screenshots/merrill-mob.webp",
		technologies: ["React", "TypeScript", "HTML5", "CSS3", "SASS"],
		liveLink: "https://merrill-reid.vercel.app",
		githubLink: "https://github.com/JJenk89/Merrill_Reid",
		id: 2,
	},
	{
		title: "Beercans & Co.",
		type: "(Brochure Site)",
		description:
			"A fully responsive brochure site built to master key web development skills. Features a dynamic image slideshow, contact form, and mobile-first design.",
		screenshot: "/screenshots/beercans-mob.webp",
		technologies: ["HTML5", "CSS3", "JavaScript"],
		liveLink: "https://jjenk89.github.io/Beercans/",
		githubLink: "https://github.com/JJenk89/Beercans",
		id: 3,
	},
	{
		title: "To-Dos",
		type: "(To-Do List App)",
		description:
			"A feature-rich to-do app built to master core React concepts. Implemented native browser drag-and-drop without libraries, light/dark mode theming, and localStorage persistence. This project underlines my solid understanding of React hooks, browser APIs, and state management.",
		screenshot: "/screenshots/todo-mob.webp",
		technologies: ["React", "HTML5", "CSS3", "JavaScript"],
		liveLink: "https://jjenk89.github.io/todo-app/",
		githubLink: "https://github.com/JJenk89/todo-app",
		id: 4,
	},
];
---

<Layout title="Projects">
	<Header src="/assets/icons/JJenk89.svg" />
	<section class="projects">
		<h2 id="projects">Featured Projects</h2>
		<p class="instructions">
			Here are some of my recent projects. Tap or hover on the cards to
			view more details.
		</p>
		<div class="cards">
			{
				projects.map((project) => (
					<div class="card" data-project-id={project.id}>
						<div class="card-content">
							<img
								src={project.screenshot}
								alt={`${project.title} screenshot`}
								class="card-img"
								id="card-img"
								draggable="false"
							/>
							<div class="card-slide-content">
								<div class="tech-container">
									<h3>{project.title}</h3>
									<h4>{project.type}</h4>
									<p>{project.description}</p>
									<div class="tech-btns">
										{project.technologies.map((tech) => (
											<span class="tech">{tech}</span>
										))}
									</div>
								</div>

								<div class="links">
									<a
										href={project.liveLink}
										target="_blank"
										rel="noopener noreferrer"
									>
										Live Site
									</a>
									<a
										href={project.githubLink}
										target="_blank"
										rel="noopener noreferrer"
									>
										GitHub
									</a>
								</div>
							</div>
						</div>
					</div>
				))
			}
		</div>
		<div class="slider-buttons">
			{
				projects.map((projectIds) => (
					<div
						class="slider-button"
						data-project-id={projectIds.id}
					/>
				))
			}
		</div>
	</section>
	<Footer />
</Layout>

<script>
	const sliderButtons = document.querySelectorAll(".slider-button");
	const cards = document.querySelectorAll(".card");
	const cardsContainer = document.querySelector(".cards");
	const img = document.querySelectorAll("#card-img");
	const hasHover = window.matchMedia(
		"(hover: hover) and (pointer: fine)"
	).matches;

	// Set the first button as active by default
	sliderButtons[0].classList.add("active");

	// Debounce function to prevent flashing during scroll due to intersection observer
	function debounce(func: (...args: any[]) => void, wait: number) {
		let timeout: ReturnType<typeof setTimeout>;
		return function executedFunction(...args: any[]) {
			const later = () => {
				clearTimeout(timeout);
				func(...args);
			};
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
		};
	}
	let isManualScroll = false;

	sliderButtons.forEach((button) => {
		button.addEventListener("click", () => {
			isManualScroll = true;

			sliderButtons.forEach((btn) => btn.classList.remove("active"));
			button.classList.add("active");

			const projectId = button.getAttribute("data-project-id");
			const card = document.querySelector(
				`.card[data-project-id="${projectId}"]`
			);

			if (card) {
				card.scrollIntoView({ behavior: "smooth" });

				setTimeout(() => {
					isManualScroll = false;
				}, 800);
			}
		});
	});

	const observerOptions = {
		root: cardsContainer,
		rootMargin: "0px",
		threshold: 0.6,
	};

	const observerCallback = debounce((entries) => {
		entries.forEach((entry: IntersectionObserverEntry) => {
			if (entry.isIntersecting) {
				const activeProjectId =
					entry.target.getAttribute("data-project-id");

				sliderButtons.forEach((button) => {
					button.classList.remove("active");
					if (
						button.getAttribute("data-project-id") ===
						activeProjectId
					) {
						button.classList.add("active");
					}
				});
			}
		});
	}, 300);

	const observer = new IntersectionObserver(
		observerCallback,
		observerOptions
	);

	cards.forEach((card) => observer.observe(card));
	if (!hasHover) {
		cards.forEach((card) => {
			card.addEventListener("click", (e) => {
				// Prevent event bubbling to avoid conflicts
				e.stopPropagation();

				// Toggle active state for this card
				const isActive = card.classList.contains("active");

				// Remove active class from all cards first
				cards.forEach((c) => c.classList.remove("active"));

				// If this card wasn't active, make it active
				if (!isActive) {
					card.classList.add("active");
					img.forEach((image) => {
						image.classList.add("blur");
					});
				} else {
					img.forEach((image) => {
						image.classList.remove("blur");
					});
				}
			});
		});

		// Close card slide content when clicking outside
		document.addEventListener("click", (e) => {
			if (!e.target || !(e.target as Element).closest(".card")) {
				cards.forEach((card) => card.classList.remove("active"));
			}
			img.forEach((image) => {
				image.classList.remove("blur");
			});
		});
	}
</script>
