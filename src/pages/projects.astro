---
import "../styles/global.css";
import "../styles/projects.css";
import Layout from "../layouts/Layout.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

const projects = [
	{
		title: "Visuals by Francesca",
		type: "(Portfolio Site)",
		description:
			"A portfolio site for a local photographer. The site showcases their photos and collects analytics data...",
		screenshot: "./screenshots/visuals-sm.webp",
		technologies: ["HTML", "CSS", "JavaScript", "GA4"],
		liveLink: "https://visualsbyfrancesca.com",
		githubLink: "https://github.com/JJenk89/fb_portfolio",
		id: 1,
	},
	{
		title: "Merrill-Reid Quiz",
		type: "(Online Quiz)",
		description:
			"A quiz application built for Merrill-Reid. The app features multiple-choice questions and displays user results dynamically, improving communication skills for employees in any field.",
		screenshot: "./screenshots/merrill-reid-sm.webp",
		technologies: ["HTML", "CSS", "SASS", "TypeScript", "React"],
		liveLink: "https://merrill-reid.vercel.app",
		githubLink: "https://github.com/JJenk89/Merrill_Reid",
		id: 2,
	},
	{
		title: "Beercans & Co.",
		type: "(Brochure Site)",
		description:
			"A brochure site for the pub Beercans & Co., showcasing their products and services.",
		screenshot: "./screenshots/beercans-sm.webp",
		technologies: ["HTML", "CSS", "JavaScript"],
		liveLink: "https://jjenk89.github.io/Beercans/",
		githubLink: "https://github.com/JJenk89/Beercans",
		id: 3,
	},
	{
		title: "To-Dos",
		type: "(To-Do List App)",
		description:
			"A simple to-do list application built with HTML, CSS, and React. It allows users to add, remove, and mark tasks as completed. Includes local storage for task persistence and a native drag-and-drop feature for task reordering.",
		screenshot: "./screenshots/todo-sm.webp",
		technologies: ["HTML", "CSS", "JavaScript", "React"],
		liveLink: "https://jjenk89.github.io/todo-app/",
		githubLink: "https://github.com/JJenk89/todo-app",
		id: 4,
	},
];
---

<Layout title="projects">
	<Header src="/assets/icons/JJenk89.svg" />
	<section class="projects">
		<h2 id="projects">Featured Projects</h2>
		<div class="cards">
			{
				projects.map((project) => (
					<div class="card" data-project-id={project.id}>
						<div class="card-content">
							<img
								src={project.screenshot}
								alt={`${project.title} screenshot`}
							/>
							<div class="card-slide-content">
								<div class="tech-container">
									<h3>{project.title}</h3>
									<h4>{project.type}</h4>
									<p>{project.description}</p>
									{project.technologies.map((tech) => (
										<span class="tech">{tech}</span>
									))}
								</div>

								<div class="links">
									<a
										href={project.liveLink}
										target="_blank"
										rel="noopener noreferrer"
									>
										Live Site
									</a>
									<a
										href={project.githubLink}
										target="_blank"
										rel="noopener noreferrer"
									>
										GitHub
									</a>
								</div>
							</div>
						</div>
					</div>
				))
			}
		</div>
		<div class="slider-buttons">
			{
				projects.map((projectIds) => (
					<div
						class="slider-button"
						data-project-id={projectIds.id}
					/>
				))
			}
		</div>
	</section>
	<Footer />
</Layout>

<script>
	const sliderButtons = document.querySelectorAll(".slider-button");
	const cards = document.querySelectorAll(".card");
	const cardsContainer = document.querySelector(".cards");

	// Set the first button as active by default
	sliderButtons[0].classList.add("active");

	// Debounce function to prevent flashing during scroll due to intersection observer
	function debounce(func: (...args: any[]) => void, wait: number) {
		let timeout: ReturnType<typeof setTimeout>;
		return function executedFunction(...args: any[]) {
			const later = () => {
				clearTimeout(timeout);
				func(...args);
			};
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
		};
	}
	let isManualScroll = false;

	sliderButtons.forEach((button) => {
		button.addEventListener("click", () => {
			isManualScroll = true;

			sliderButtons.forEach((btn) => btn.classList.remove("active"));
			button.classList.add("active");

			const projectId = button.getAttribute("data-project-id");
			const card = document.querySelector(
				`.card[data-project-id="${projectId}"]`
			);

			if (card) {
				card.scrollIntoView({ behavior: "smooth" });

				setTimeout(() => {
					isManualScroll = false;
				}, 800);
			}
		});
	});

	const observerOptions = {
		root: cardsContainer,
		rootMargin: "0px",
		threshold: 0.6,
	};

	const observerCallback = debounce((entries) => {
		entries.forEach((entry: IntersectionObserverEntry) => {
			if (entry.isIntersecting) {
				const activeProjectId =
					entry.target.getAttribute("data-project-id");

				sliderButtons.forEach((button) => {
					button.classList.remove("active");
					if (
						button.getAttribute("data-project-id") ===
						activeProjectId
					) {
						button.classList.add("active");
					}
				});
			}
		});
	}, 300);

	const observer = new IntersectionObserver(
		observerCallback,
		observerOptions
	);
	cards.forEach((card) => observer.observe(card));
</script>
